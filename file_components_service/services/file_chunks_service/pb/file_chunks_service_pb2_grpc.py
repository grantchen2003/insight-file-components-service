# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import file_chunks_service_pb2 as file__chunks__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class FileChunksServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateFileChunks = channel.unary_unary(
                '/FileChunksService/CreateFileChunks',
                request_serializer=file__chunks__service__pb2.CreateFileChunksRequest.SerializeToString,
                response_deserializer=file__chunks__service__pb2.CreateFileChunksResponse.FromString,
                )
        self.GetSortedFileChunksContent = channel.unary_stream(
                '/FileChunksService/GetSortedFileChunksContent',
                request_serializer=file__chunks__service__pb2.GetSortedFileChunksContentRequest.SerializeToString,
                response_deserializer=file__chunks__service__pb2.FileChunkContent.FromString,
                )
        self.DeleteFileChunksByRepositoryId = channel.unary_unary(
                '/FileChunksService/DeleteFileChunksByRepositoryId',
                request_serializer=file__chunks__service__pb2.DeleteFileChunksByRepositoryIdRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DeleteFileChunksByRepositoryIdAndFilePaths = channel.unary_unary(
                '/FileChunksService/DeleteFileChunksByRepositoryIdAndFilePaths',
                request_serializer=file__chunks__service__pb2.DeleteFileChunksByRepositoryIdAndFilePathsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class FileChunksServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateFileChunks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSortedFileChunksContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFileChunksByRepositoryId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFileChunksByRepositoryIdAndFilePaths(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileChunksServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateFileChunks': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFileChunks,
                    request_deserializer=file__chunks__service__pb2.CreateFileChunksRequest.FromString,
                    response_serializer=file__chunks__service__pb2.CreateFileChunksResponse.SerializeToString,
            ),
            'GetSortedFileChunksContent': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSortedFileChunksContent,
                    request_deserializer=file__chunks__service__pb2.GetSortedFileChunksContentRequest.FromString,
                    response_serializer=file__chunks__service__pb2.FileChunkContent.SerializeToString,
            ),
            'DeleteFileChunksByRepositoryId': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFileChunksByRepositoryId,
                    request_deserializer=file__chunks__service__pb2.DeleteFileChunksByRepositoryIdRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteFileChunksByRepositoryIdAndFilePaths': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFileChunksByRepositoryIdAndFilePaths,
                    request_deserializer=file__chunks__service__pb2.DeleteFileChunksByRepositoryIdAndFilePathsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileChunksService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileChunksService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateFileChunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileChunksService/CreateFileChunks',
            file__chunks__service__pb2.CreateFileChunksRequest.SerializeToString,
            file__chunks__service__pb2.CreateFileChunksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSortedFileChunksContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/FileChunksService/GetSortedFileChunksContent',
            file__chunks__service__pb2.GetSortedFileChunksContentRequest.SerializeToString,
            file__chunks__service__pb2.FileChunkContent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFileChunksByRepositoryId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileChunksService/DeleteFileChunksByRepositoryId',
            file__chunks__service__pb2.DeleteFileChunksByRepositoryIdRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFileChunksByRepositoryIdAndFilePaths(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileChunksService/DeleteFileChunksByRepositoryIdAndFilePaths',
            file__chunks__service__pb2.DeleteFileChunksByRepositoryIdAndFilePathsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
